{"remainingRequest":"/Users/Mac/Downloads/chatroulette-master/node_modules/babel-loader/lib/index.js!/Users/Mac/Downloads/chatroulette-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/Mac/Downloads/chatroulette-master/src/store/actions.js","dependencies":[{"path":"/Users/Mac/Downloads/chatroulette-master/src/store/actions.js","mtime":1570804640000},{"path":"/Users/Mac/Downloads/chatroulette-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mac/Downloads/chatroulette-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/Mac/Downloads/chatroulette-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport util from \"../util\";\n/**\n * Handle errors which occur when trying to access the local media\n * hardware; that is, exceptions thrown by getUserMedia(). The two most\n * likely scenarios are that the user has no camera and/or microphone\n * or that they declined to share their equipment when prompted. If\n * they simply opted not to share their media, that's not really an\n * error, so we won't present a message in that situation.\n */\n\nfunction handleGetUserMediaError(err) {\n  util.trace(err);\n\n  switch (err.name) {\n    case 'NotFoundError':\n      alert('Unable to open your call because no camera and/or microphone were found.');\n      break;\n\n    case 'SecurityError':\n    case 'PermissionDeniedError':\n      // Do nothing; this is the same as the user canceling the call.\n      break;\n\n    default:\n      alert('Error opening your camera and/or microphone: ' + err.message);\n      break;\n  }\n}\n\nexport default {\n  /**\n   * A new ICE candidate has been received from the other peer. Call\n   * RTCPeerConnection.addIceCandidate() to send it along to the\n   * local ICE framework.\n   */\n  addIceCandidate: function addIceCandidate(_ref, candidateInfo) {\n    var state = _ref.state;\n    var candidate = new RTCIceCandidate(candidateInfo);\n    util.log('*** Adding received ICE candidate: ' + JSON.stringify(candidate));\n    return state.peerConnection.addIceCandidate(candidate);\n  },\n  setLocalDescription: function setLocalDescription(_ref2, description) {\n    var state = _ref2.state;\n    util.log('---> Setting local description to the offer');\n    return state.peerConnection.setLocalDescription(description);\n  },\n  setRemoteDescription: function setRemoteDescription(_ref3, sdp) {\n    var state = _ref3.state;\n    util.log('---> Setting remote description');\n    var description = new RTCSessionDescription(sdp);\n    return state.peerConnection.setRemoteDescription(description);\n  },\n  createOffer: function createOffer(_ref4) {\n    var state = _ref4.state;\n    util.log('---> Creating offer');\n    return state.peerConnection.createOffer();\n  },\n  sendOfferToPeer: function sendOfferToPeer(_ref5) {\n    var state = _ref5.state;\n    util.log('---> Sending the offer to the remote peer');\n    state.socket.emit('video-offer', state.peerConnection.localDescription);\n  },\n  createAnswer: function createAnswer(_ref6) {\n    var state = _ref6.state;\n    util.log('---> Creating answer');\n    return state.peerConnection.createAnswer();\n  },\n  sendAnswerToPeer: function sendAnswerToPeer(_ref7) {\n    var state = _ref7.state;\n    util.log('---> Sending answer to the remote peer');\n    state.socket.emit('video-answer', state.peerConnection.localDescription);\n  },\n  hangUpCall: function hangUpCall(_ref8) {\n    var state = _ref8.state;\n    util.log('---> Notify the remote peer to hang up the call');\n    state.socket.emit('hang-up');\n  },\n  ping: function ping(_ref9) {\n    var state = _ref9.state;\n    state.socket.emit('ping');\n  },\n  getUserMedia: function getUserMedia(_ref10) {\n    var commit = _ref10.commit,\n        state = _ref10.state;\n    return navigator.mediaDevices.getUserMedia(state.mediaConstraints).then(function (mediaStream) {\n      commit('addLocalStream', mediaStream);\n    }).catch(function (err) {\n      handleGetUserMediaError(err); // Make sure we shut down our end of the RTCPeerConnection so we're ready to try again.\n\n      commit('closePeerConnection');\n    });\n  }\n};",{"version":3,"sources":["/Users/Mac/Downloads/chatroulette-master/src/store/actions.js"],"names":["util","handleGetUserMediaError","err","trace","name","alert","message","addIceCandidate","candidateInfo","state","candidate","RTCIceCandidate","log","JSON","stringify","peerConnection","setLocalDescription","description","setRemoteDescription","sdp","RTCSessionDescription","createOffer","sendOfferToPeer","socket","emit","localDescription","createAnswer","sendAnswerToPeer","hangUpCall","ping","getUserMedia","commit","navigator","mediaDevices","mediaConstraints","then","mediaStream","catch"],"mappings":"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","sourcesContent":["import util from '../util'\n\n/**\n * Handle errors which occur when trying to access the local media\n * hardware; that is, exceptions thrown by getUserMedia(). The two most\n * likely scenarios are that the user has no camera and/or microphone\n * or that they declined to share their equipment when prompted. If\n * they simply opted not to share their media, that's not really an\n * error, so we won't present a message in that situation.\n */\nfunction handleGetUserMediaError (err) {\n  util.trace(err)\n\n  switch (err.name) {\n    case 'NotFoundError':\n      alert('Unable to open your call because no camera and/or microphone were found.')\n      break\n    case 'SecurityError':\n    case 'PermissionDeniedError':\n      // Do nothing; this is the same as the user canceling the call.\n      break\n    default:\n      alert('Error opening your camera and/or microphone: ' + err.message)\n      break\n  }\n}\n\nexport default {\n  /**\n   * A new ICE candidate has been received from the other peer. Call\n   * RTCPeerConnection.addIceCandidate() to send it along to the\n   * local ICE framework.\n   */\n  addIceCandidate ({ state }, candidateInfo) {\n    const candidate = new RTCIceCandidate(candidateInfo)\n    util.log('*** Adding received ICE candidate: ' + JSON.stringify(candidate))\n    return state.peerConnection.addIceCandidate(candidate)\n  },\n\n  setLocalDescription ({ state }, description) {\n    util.log('---> Setting local description to the offer')\n    return state.peerConnection.setLocalDescription(description)\n  },\n\n  setRemoteDescription ({ state }, sdp) {\n    util.log('---> Setting remote description')\n    const description = new RTCSessionDescription(sdp)\n    return state.peerConnection.setRemoteDescription(description)\n  },\n\n  createOffer ({ state }) {\n    util.log('---> Creating offer')\n    return state.peerConnection.createOffer()\n  },\n\n  sendOfferToPeer ({ state }) {\n    util.log('---> Sending the offer to the remote peer')\n    state.socket.emit('video-offer', state.peerConnection.localDescription)\n  },\n\n  createAnswer ({ state }) {\n    util.log('---> Creating answer')\n    return state.peerConnection.createAnswer()\n  },\n\n  sendAnswerToPeer ({ state }) {\n    util.log('---> Sending answer to the remote peer')\n    state.socket.emit('video-answer', state.peerConnection.localDescription)\n  },\n\n  hangUpCall ({ state }) {\n    util.log('---> Notify the remote peer to hang up the call')\n    state.socket.emit('hang-up')\n  },\n\n  ping ({ state }) {\n    state.socket.emit('ping')\n  },\n\n  getUserMedia ({ commit, state }) {\n    return navigator.mediaDevices.getUserMedia(state.mediaConstraints)\n      .then((mediaStream) => {\n        commit('addLocalStream', mediaStream)\n      })\n      .catch((err) => {\n        handleGetUserMediaError(err)\n        // Make sure we shut down our end of the RTCPeerConnection so we're ready to try again.\n        commit('closePeerConnection')\n      })\n  }\n}\n"]}]}