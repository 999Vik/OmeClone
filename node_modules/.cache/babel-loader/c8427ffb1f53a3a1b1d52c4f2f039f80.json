{"remainingRequest":"/Users/Mac/Downloads/chatroulette-master/node_modules/babel-loader/lib/index.js!/Users/Mac/Downloads/chatroulette-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Mac/Downloads/chatroulette-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Mac/Downloads/chatroulette-master/src/components/Input.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Mac/Downloads/chatroulette-master/src/components/Input.vue","mtime":1570804640000},{"path":"/Users/Mac/Downloads/chatroulette-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mac/Downloads/chatroulette-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/Mac/Downloads/chatroulette-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mac/Downloads/chatroulette-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/Mac/Downloads/chatroulette-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport InputToolbar from \"./Toolbar\";\nimport { mapState, mapMutations } from 'vuex';\nexport default {\n  name: 'chat-input',\n  components: {\n    InputToolbar: InputToolbar\n  },\n  computed: mapState(['socket', 'connectionState']),\n  methods: _objectSpread(_objectSpread({}, mapMutations(['addMessage'])), {}, {\n    handleInput: function handleInput(event) {\n      if (!event.shiftKey && event.key === 'Enter') {\n        event.preventDefault();\n        this.sendMessage();\n      }\n    },\n    addEmoji: function addEmoji(emoji) {\n      var textarea = this.$refs.textarea;\n      var value = textarea.value;\n      var start = textarea.selectionStart;\n      var end = textarea.selectionEnd;\n      textarea.value = value.slice(0, start) + emoji + value.slice(end);\n      textarea.setSelectionRange(start + 2, start + 2); // emoji takes up two code units\n\n      textarea.focus();\n    },\n    sendMessage: function sendMessage(event) {\n      var textarea = this.$refs.textarea;\n      var text = textarea.value;\n\n      if (text) {\n        this.addMessage({\n          text: text,\n          role: 'you'\n        });\n        textarea.value = '';\n\n        if (this.connectionState === 'open') {\n          this.socket.emit('message', {\n            text: text,\n            role: 'partner'\n          });\n        }\n      }\n    }\n  })\n};",{"version":3,"sources":["Input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAcA,OAAA,YAAA;AACA,SAAA,QAAA,EAAA,YAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAGA,EAAA,UAAA,EAAA;AACA,IAAA,YAAA,EAAA;AADA,GAHA;AAOA,EAAA,QAAA,EAAA,QAAA,CAAA,CAAA,QAAA,EAAA,iBAAA,CAAA,CAPA;AASA,EAAA,OAAA,kCACA,YAAA,CAAA,CAAA,YAAA,CAAA,CADA;AAGA,IAAA,WAHA,uBAGA,KAHA,EAGA;AACA,UAAA,CAAA,KAAA,CAAA,QAAA,IAAA,KAAA,CAAA,GAAA,KAAA,OAAA,EAAA;AACA,QAAA,KAAA,CAAA,cAAA;AACA,aAAA,WAAA;AACA;AACA,KARA;AAUA,IAAA,QAVA,oBAUA,KAVA,EAUA;AACA,UAAA,QAAA,GAAA,KAAA,KAAA,CAAA,QAAA;AACA,UAAA,KAAA,GAAA,QAAA,CAAA,KAAA;AACA,UAAA,KAAA,GAAA,QAAA,CAAA,cAAA;AACA,UAAA,GAAA,GAAA,QAAA,CAAA,YAAA;AAEA,MAAA,QAAA,CAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA,IAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,MAAA,QAAA,CAAA,iBAAA,CAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAPA,CAOA;;AACA,MAAA,QAAA,CAAA,KAAA;AACA,KAnBA;AAqBA,IAAA,WArBA,uBAqBA,KArBA,EAqBA;AACA,UAAA,QAAA,GAAA,KAAA,KAAA,CAAA,QAAA;AACA,UAAA,IAAA,GAAA,QAAA,CAAA,KAAA;;AAEA,UAAA,IAAA,EAAA;AACA,aAAA,UAAA,CAAA;AAAA,UAAA,IAAA,EAAA,IAAA;AAAA,UAAA,IAAA,EAAA;AAAA,SAAA;AACA,QAAA,QAAA,CAAA,KAAA,GAAA,EAAA;;AACA,YAAA,KAAA,eAAA,KAAA,MAAA,EAAA;AACA,eAAA,MAAA,CAAA,IAAA,CAAA,SAAA,EAAA;AAAA,YAAA,IAAA,EAAA,IAAA;AAAA,YAAA,IAAA,EAAA;AAAA,WAAA;AACA;AACA;AACA;AAhCA;AATA,CAAA","sourcesContent":["<template>\n  <div id=\"input\" class=\"flex\">\n    <div class=\"input-area\">\n      <input-toolbar @addEmoji=\"addEmoji\"></input-toolbar>\n      <textarea class=\"textarea\" ref=\"textarea\" @keypress.stop=\"handleInput\"></textarea>\n    </div>\n\n    <div class=\"action-area\">\n      <button type=\"button\" class=\"send\" @click=\"sendMessage\">Send</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport InputToolbar from './Toolbar'\nimport { mapState, mapMutations } from 'vuex'\n\nexport default {\n  name: 'chat-input',\n\n  components: {\n    InputToolbar\n  },\n\n  computed: mapState(['socket', 'connectionState']),\n\n  methods: {\n    ...mapMutations(['addMessage']),\n\n    handleInput (event) {\n      if (!event.shiftKey && event.key === 'Enter') {\n        event.preventDefault()\n        this.sendMessage()\n      }\n    },\n\n    addEmoji (emoji) {\n      let textarea = this.$refs.textarea\n      let value = textarea.value\n      let start = textarea.selectionStart\n      let end = textarea.selectionEnd\n\n      textarea.value = value.slice(0, start) + emoji + value.slice(end)\n      textarea.setSelectionRange(start + 2, start + 2) // emoji takes up two code units\n      textarea.focus()\n    },\n\n    sendMessage (event) {\n      let textarea = this.$refs.textarea\n      let text = textarea.value\n\n      if (text) {\n        this.addMessage({ text, role: 'you' })\n        textarea.value = ''\n        if (this.connectionState === 'open') {\n          this.socket.emit('message', { text, role: 'partner' })\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n#input {\n  border-top: 1px solid #ddd;\n  flex: 1 0 auto;\n\n  .input-area {\n    flex: 1 1 auto;\n    padding: 5px 20px;\n\n    .textarea {\n      width: 100%;\n      height: 60px;\n      resize: none;\n      border: none;\n      padding: 0;\n      outline: none;\n      font-size: 1rem;\n    }\n  }\n\n  .action-area {\n    border-left: 1px solid #ddd;\n\n    .send {\n      width: 80px;\n\n      &:hover {\n        background-color: #f5f5f5;\n      }\n\n      &:active {\n        background-color: #eeeeee;\n      }\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}