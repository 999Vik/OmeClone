{"remainingRequest":"/Users/Mac/Documents/GitHub/OmeClone/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Mac/Documents/GitHub/OmeClone/src/components/Canvas.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/Mac/Documents/GitHub/OmeClone/src/components/Canvas.vue","mtime":1627654117061},{"path":"/Users/Mac/Documents/GitHub/OmeClone/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mac/Documents/GitHub/OmeClone/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/Mac/Documents/GitHub/OmeClone/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/Mac/Documents/GitHub/OmeClone/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mac/Documents/GitHub/OmeClone/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mac/Documents/GitHub/OmeClone/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2NhbnZhcyB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMDsKICBsZWZ0OiAwOwogIHdpZHRoOiAxMDAlOwoKICAubG9jYWwtY2FudmFzLCAucmVtb3RlLWNhbnZhcyB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDA7CiAgICBsZWZ0OiAwOwogICAgY3Vyc29yOiBkZWZhdWx0OwogIH0KCiAgLmNhbnZhcy10b29sIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGJvdHRvbTogLTMzcHg7CiAgICBsZWZ0OiAxMDBweDsKCiAgICBpbnB1dCB7CiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Canvas.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Canvas.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"canvas\" v-show=\"isCanvasShown\" ref=\"canvas\" :style=\"parentStyle\">\n    <canvas\n      class=\"remote-canvas\"\n      ref=\"remoteCanvas\"\n      :width=\"style.width\"\n      :height=\"style.height\">\n    </canvas>\n    <canvas\n      class=\"local-canvas\"\n      ref=\"localCanvas\"\n      @mousedown.stop=\"startPaint\"\n      @mouseup.stop=\"stopPaint\"\n      @mouseout.stop=\"stopPaint\"\n      :width=\"style.width\"\n      :height=\"style.height\">\n    </canvas>\n\n    <span class=\"canvas-tool\">\n      <input type=\"color\" name=\"color\" @change=\"setStrokeStyle\">\n      <input type=\"range\" name=\"range\" min=\"1\" max=\"10\" value=\"1\" @change=\"setLineWidth\">\n      <input type=\"button\" name=\"save\" value=\"Save\" @click=\"save\">\n      <input type=\"button\" name=\"clear\" value=\"Clear\" @click=\"clear\">\n    </span>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n  name: 'chat-canvas',\n\n  data () {\n    return {\n      prev: { x: 0, y: 0 },\n      curr: { x: 0, y: 0 },\n      ctx: null,\n      strokeStyle: 'black',\n      lineWidth: 1,\n      style: { width: 0, height: 0 }\n    }\n  },\n\n  computed: {\n    ...mapState(['remoteCanvas', 'isCanvasShown', 'socket', 'connectionState']),\n    parentStyle () {\n      return {\n        width: this.style.width + 'px',\n        height: this.style.height + 'px'\n      }\n    }\n  },\n\n  watch: {\n    remoteCanvas (payload) {\n      let ctx = this.$refs.remoteCanvas.getContext('2d')\n      ctx.beginPath()\n      ctx.moveTo(payload.prev.x, payload.prev.y)\n      ctx.lineTo(payload.curr.x, payload.curr.y)\n      ctx.lineWidth = payload.lineWidth\n      ctx.strokeStyle = payload.strokeStyle\n      ctx.stroke()\n      ctx.closePath()\n    },\n    connectionState (state) {\n      if (state === 'closed') {\n        this.clear()\n      }\n    }\n  },\n\n  mounted () {\n    let sibling = this.$refs.canvas.previousElementSibling\n    this.style.width = sibling.offsetWidth\n    this.style.height = sibling.offsetHeight\n    this.ctx = this.$refs.localCanvas.getContext('2d')\n  },\n\n  methods: {\n    startPaint (event) {\n      this.curr.x = event.offsetX\n      this.curr.y = event.offsetY\n      this.ctx.beginPath()\n      event.target.addEventListener('mousemove', this.paint)\n    },\n    stopPaint (event) {\n      this.ctx.closePath()\n      event.target.removeEventListener('mousemove', this.paint)\n    },\n    paint (event) {\n      event.stopPropagation()\n      this.prev.x = this.curr.x\n      this.prev.y = this.curr.y\n      this.curr.x = event.offsetX\n      this.curr.y = event.offsetY\n      this.ctx.moveTo(this.prev.x, this.prev.y)\n      this.ctx.lineTo(this.curr.x, this.curr.y)\n      this.ctx.lineWidth = this.lineWidth\n      this.ctx.strokeStyle = this.strokeStyle\n      this.ctx.stroke()\n      if (this.connectionState === 'open') {\n        this.sync()\n      }\n    },\n    sync () {\n      this.socket.emit('canvas', this.$data)\n    },\n    setStrokeStyle (event) {\n      this.strokeStyle = event.target.value\n    },\n    setLineWidth (event) {\n      this.lineWidth = event.target.value\n    },\n    clear (event) {\n      let remoteCtx = this.$refs.remoteCanvas.getContext('2d')\n      remoteCtx.clearRect(0, 0, this.remoteCanvas.style.width, this.remoteCanvas.style.height)\n      this.ctx.clearRect(0, 0, this.style.width, this.style.height)\n    },\n    save (event) {\n      let canvas = document.createElement('canvas')\n      canvas.width = this.style.width\n      canvas.height = this.style.height\n      let ctx = canvas.getContext('2d')\n      ctx.drawImage(this.$refs.remoteCanvas, 0, 0)\n      ctx.drawImage(this.$refs.localCanvas, 0, 0)\n      let dataURL = canvas.toDataURL('image/png')\n      let link = document.createElement('a')\n      link.download = 'OmeCloneSave.png'\n      link.href = dataURL\n      link.click()\n      canvas = link = null\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n#canvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n\n  .local-canvas, .remote-canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    cursor: default;\n  }\n\n  .canvas-tool {\n    position: absolute;\n    bottom: -33px;\n    left: 100px;\n\n    input {\n      vertical-align: middle;\n    }\n  }\n}\n</style>\n"]}]}